{"version":3,"sources":["components/UberTile/UberTile.jsx","data.js","components/App/App.jsx","serviceWorker.js","index.jsx"],"names":["UberTile","item","this","props","settings","itemHeight","height","itemWidth","width","widthStyle","concat","minWidth","maxWidth","heightStyle","minHeight","maxHeight","gridStyle","gridColumnStart","gridColumnEnd","gridRowStart","gridRow","gridRowEnd","tileStyle","Object","objectSpread","backgroundImageStyle","textStyle","lineHeight","marginTop","fontSize","background_color","backgroundColor","text_color","color","background_logo","backgroundImage","backgroundSize","background_logo_size","background_picture","backgroundImagePrefix","backgroundSizePrefix","backgroundSizeSuffix","background_picture_size","title","opacity","react_default","a","createElement","className","link","style","href","description","target","default_link_target","React","Component","data","items","default_item","App","undefined","push","numberOfColumns","length","numberOfRows","Math","ceil","gridTemplateColumns","repeat","emptySlots","map","index","floor","isLastItem","components_UberTile_UberTile","key","Boolean","window","location","hostname","match","ReactDOM","render","components_App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.30249dc2.chunk.js","sourcesContent":["import React from 'react';\nimport './UberTile.css';\n\nclass UberTile extends React.Component {\n  render() {\n    const item = this.props.item;\n    const settings = this.props.settings;\n    const itemHeight = this.props.height;\n    const itemWidth = this.props.width || 100;\n    const widthStyle = {\n      width: `${itemWidth}vw`,\n      minWidth: `${itemWidth}vw`,\n      maxWidth: `${itemWidth}vw`,\n    };\n    const heightStyle = {\n      height: `${itemHeight}vh`,\n      minHeight: `${itemHeight}vh`,\n      maxHeight: `${itemHeight}vh`,\n    };\n    const gridStyle = {\n      gridColumnStart: this.props.gridColumnStart,\n      gridColumnEnd: this.props.gridColumnEnd,\n      gridRowStart: this.props.gridRow,\n      gridRowEnd: this.props.gridRow + 1,\n    };\n    const tileStyle = {\n      ...widthStyle,\n      ...heightStyle,\n      ...gridStyle,\n    };\n    const backgroundImageStyle = {\n      ...widthStyle,\n      ...heightStyle,\n      ...gridStyle,\n    };\n    const textStyle = {\n      ...widthStyle,\n      ...heightStyle,\n      ...gridStyle,\n      lineHeight: `${itemHeight}vh`,\n      marginTop: `-${itemHeight}vh`,\n      fontSize: `${itemHeight / 5}vh`,\n    };\n\n    if (item.background_color) { backgroundImageStyle.backgroundColor = item.background_color; }\n    if (item.text_color) { textStyle.color = item.text_color; }\n    if (item.background_logo) {\n      backgroundImageStyle.backgroundImage = `url(/img/${item.background_logo})`;\n      backgroundImageStyle.backgroundSize = item.background_logo_size ? item.background_logo_size : '50%';\n    }\n    if (item.background_picture) {\n      let backgroundImagePrefix = '';\n      let backgroundSizePrefix = '';\n      if (item.background_logo) {\n        backgroundImagePrefix = `${backgroundImageStyle.backgroundImage}, `;\n        backgroundSizePrefix = `${backgroundImageStyle.backgroundSize}, `;\n      }\n      backgroundImageStyle.backgroundImage = `${backgroundImagePrefix}url(/img/${item.background_picture})`;\n      const backgroundSizeSuffix = item.background_picture_size ? item.background_picture_size : 'cover';\n      backgroundImageStyle.backgroundSize = `${backgroundSizePrefix}${backgroundSizeSuffix}`;\n    }\n    if (item.title && (item.background_logo || item.background_picture)) { backgroundImageStyle.opacity = '0.2'; }\n\n    // console.log(`item ${this.props.key} -> c=${this.props.gridColumnStart} r=${this.props.gridRow}`);\n\n    // TODO - show item description as overlay\n\n    return (\n      <div className={`UberTile${item.link ? ' withLink' : ''}`} style={tileStyle}>\n        {item.link ? (\n          <a className=\"UberTile-link\" href={item.link} title={item.description} target={settings.default_link_target}>\n            <div className=\"UberTile-background-image\" style={backgroundImageStyle} />\n            <div className=\"UberTile-text\" style={textStyle}><span>{item.title}</span></div>\n          </a>\n        ) : (\n          <span>\n            <div className=\"UberTile-background-image\" style={backgroundImageStyle} />\n            <div className=\"UberTile-text\" style={textStyle}><span>{item.title}</span></div>\n          </span>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default UberTile;\n","export default {\n  items: [\n    {\n      link: 'https://github.com/StegSchreck',\n      text_color: '#FFFFFF',\n      description: 'My open source projects on GitHub',\n      background_logo: 'GitHub_white.svg',\n      background_color: '#000000',\n    },\n    {\n      link: 'https://github.com/StegSchreck/AngularCV',\n      description: 'Angular based online-CV',\n      background_logo: 'AngularCV_white_transparent.svg',\n    },\n    {\n      link: 'https://github.com/StegSchreck/RatS',\n      text_color: '#FFFFFF',\n      description: 'Python script for syncing movie ratings',\n      background_logo: 'RatS_inverted.png',\n      background_color: '#6D08A6',\n    },\n    {\n      link: 'https://github.com/StegSchreck/uberpage',\n      text_color: '#FFFFFF',\n      description: 'Python script for syncing movie ratings',\n      background_logo: 'UberPage_white.svg',\n      background_color: '#4A86E8',\n    },\n    {\n      link: 'https://github.com/StegSchreck/AWSreCalendar',\n      description: 'Python script for planning my stay at AWS re:Invent 2018',\n      background_logo: 'AWSreCalendar.png',\n      background_logo_size: 'contain',\n      background_color: '#FF9900',\n    },\n    {\n      link: 'https://github.com/StegSchreck/RecodingAviation',\n      description: 'Angular app for hackathon reCoding Aviation 2017',\n      background_logo: 'ReCodingAviation.png',\n      background_logo_size: 'contain',\n      background_color: '#E30613',\n    },\n    {\n      link: 'https://github.com/WiSchLabs/Kicktipper',\n      description: 'Calculating tips for football predictions games on Kicktipp',\n      background_logo: 'Kicktipper.png',\n      background_color: '#999999',\n    },\n    {\n      link: 'https://github.com/WiSchLabs/ofm_helper',\n      text_color: '#FFFFFF',\n      description: 'Django based helper tool for onlinefussballmanager.de',\n      background_logo: 'OFM_Helper_sw.png',\n      background_color: '#239123',\n    },\n  ],\n  settings: {\n    default_link_target: '_blank',\n    default_item: 'true',\n  },\n};\n","import React from 'react';\nimport './App.css';\nimport UberTile from '../UberTile/UberTile.jsx';\nimport data from '../../data';\n\nfunction App() {\n  const defaultItem = {\n    link: 'https://github.com/StegSchreck/uberpage',\n    title: 'About this page',\n    description: 'This page was created using the UberPage project.',\n    background_logo: 'UberPage.svg',\n    background_logo_size: '75%',\n  };\n  if (data.settings.default_item === undefined || !data.settings.default_item) { data.items.push(defaultItem); }\n\n  // TODO - set max number of columns depending on viewport width\n\n  function calculateNumberOfColumns() {\n    if (data.items.length <= 3) {\n      return 1;\n    }\n    if (data.items.length <= 8) {\n      return 2;\n    }\n    return 3;\n  }\n\n  const numberOfColumns = calculateNumberOfColumns();\n  const numberOfRows = Math.ceil(data.items.length / numberOfColumns);\n  const itemHeight = 100 / numberOfRows;\n  let itemWidth = 100 / numberOfColumns;\n  const gridStyle = { gridTemplateColumns: 'auto '.repeat(numberOfColumns) };\n  const emptySlots = (numberOfColumns * numberOfRows) - data.items.length;\n  // console.log(`${data.items.length} items -> c=${numberOfColumns} r=${numberOfRows} -> ${emptySlots} empty slots   #   ${JSON.stringify(gridStyle)}`);\n\n  return (\n    <div className=\"App\" style={gridStyle}>\n      {\n        data.items.map((item, index) => {\n          const gridColumnStart = (index % numberOfColumns) + 1;\n          const gridRow = Math.floor((index / numberOfColumns) + 1);\n          const isLastItem = index + 1 === data.items.length;\n          // console.log(`index=${index} ${isLastItem}`);\n          const gridColumnEnd = isLastItem ? gridColumnStart + (emptySlots + 1) : gridColumnStart + 1;\n          itemWidth = isLastItem ? itemWidth * (emptySlots + 1) : itemWidth;\n          return (\n            <UberTile\n              key={index}\n              item={item}\n              settings={data.settings}\n              height={itemHeight}\n              width={itemWidth}\n              gridColumnStart={gridColumnStart}\n              gridColumnEnd={gridColumnEnd}\n              gridRow={gridRow}\n            />\n          );\n        })\n      }\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost'\n  // [::1] is the IPv6 localhost address.\n  || window.location.hostname === '[::1]'\n  // 127.0.0.1/8 is considered localhost for IPv4.\n  || window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n);\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all '\n                + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404\n        || (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service '\n            + 'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App.jsx';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}