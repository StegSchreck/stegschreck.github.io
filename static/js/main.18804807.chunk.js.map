{"version":3,"sources":["components/UberTile/UberTile.jsx","components/UberPage/UberPage.jsx","data.js","components/App/App.jsx","serviceWorker.js","index.jsx"],"names":["UberTile","item","this","props","settings","itemHeight","height","itemWidth","width","widthStyle","minWidth","maxWidth","heightStyle","minHeight","maxHeight","gridStyle","gridColumnStart","gridColumnEnd","gridRowStart","gridRow","gridRowEnd","tileStyle","backgroundImageStyle","titleStyle","lineHeight","marginTop","fontSize","descriptionStyle","background_color","backgroundColor","text_color","color","background_logo","backgroundImage","backgroundSize","background_logo_size","background_picture","backgroundImagePrefix","backgroundSizePrefix","backgroundSizeSuffix","background_picture_size","title","opacity","className","link","style","href","target","default_link_target","description","React","Component","UberPage","state","pageWidth","window","innerWidth","items","onresize","setState","numberOfColumns","length","numberOfRows","Math","ceil","gridTemplateColumns","repeat","emptySlots","map","index","floor","isLastItem","key","default_item","App","undefined","data","push","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.18804807.chunk.js","sourcesContent":["import React from 'react';\nimport './UberTile.css';\n\nclass UberTile extends React.Component {\n  render() {\n    const item = this.props.item;\n    const settings = this.props.settings;\n    const itemHeight = this.props.height;\n    const itemWidth = this.props.width || 100;\n    const widthStyle = {\n      width: `${itemWidth}vw`,\n      minWidth: `${itemWidth}vw`,\n      maxWidth: `${itemWidth}vw`,\n    };\n    const heightStyle = {\n      height: `${itemHeight}vh`,\n      minHeight: `${itemHeight}vh`,\n      maxHeight: `${itemHeight}vh`,\n    };\n    const gridStyle = {\n      gridColumnStart: this.props.gridColumnStart,\n      gridColumnEnd: this.props.gridColumnEnd,\n      gridRowStart: this.props.gridRow,\n      gridRowEnd: this.props.gridRow + 1,\n    };\n    const tileStyle = {\n      ...widthStyle,\n      ...heightStyle,\n      ...gridStyle,\n    };\n    const backgroundImageStyle = {\n      ...widthStyle,\n      ...heightStyle,\n      ...gridStyle,\n    };\n    const titleStyle = {\n      ...widthStyle,\n      ...heightStyle,\n      ...gridStyle,\n      lineHeight: `${itemHeight}vh`,\n      marginTop: `-${itemHeight}vh`,\n      fontSize: `${itemHeight / 7}vh`,\n    };\n    const descriptionStyle = {\n      ...widthStyle,\n      ...heightStyle,\n      ...gridStyle,\n      lineHeight: `${itemHeight}vh`,\n      marginTop: `-${itemHeight}vh`,\n      fontSize: `${itemHeight / 15}vh`,\n    };\n\n    if (item.background_color) { backgroundImageStyle.backgroundColor = item.background_color; }\n    if (item.text_color) { titleStyle.color = item.text_color; }\n    if (item.background_logo) {\n      backgroundImageStyle.backgroundImage = `url(/img/${item.background_logo})`;\n      backgroundImageStyle.backgroundSize = item.background_logo_size ? item.background_logo_size : '50%';\n    }\n    if (item.background_picture) {\n      let backgroundImagePrefix = '';\n      let backgroundSizePrefix = '';\n      if (item.background_logo) {\n        backgroundImagePrefix = `${backgroundImageStyle.backgroundImage}, `;\n        backgroundSizePrefix = `${backgroundImageStyle.backgroundSize}, `;\n      }\n      backgroundImageStyle.backgroundImage = `${backgroundImagePrefix}url(/img/${item.background_picture})`;\n      const backgroundSizeSuffix = item.background_picture_size ? item.background_picture_size : 'cover';\n      backgroundImageStyle.backgroundSize = `${backgroundSizePrefix}${backgroundSizeSuffix}`;\n    }\n    if (item.title && (item.background_logo || item.background_picture)) { backgroundImageStyle.opacity = '0.2'; }\n\n    return (\n      <div className={`UberTile${item.link ? ' withLink' : ''}`} style={tileStyle}>\n        <a className=\"UberTile-link\" {... item.link ? {href: item.link} : {}} target={settings.default_link_target}>\n          <div className=\"UberTile-background-image\" style={backgroundImageStyle} />\n          {item.description && <div className=\"UberTile-description\" style={descriptionStyle}><span>{item.description}</span></div>}\n          <div className=\"UberTile-title\" style={titleStyle}><span>{item.title}</span></div>\n        </a>\n      </div>\n    );\n  }\n}\n\nexport default UberTile;\n","import React from 'react';\nimport './UberPage.css';\nimport UberTile from '../UberTile/UberTile.jsx';\n\nclass UberPage extends React.Component {\n  state = {\n    pageWidth: window.innerWidth\n  };\n  render() {\n    const items = this.props.items;\n    const settings = this.props.settings;\n    function calculateNumberOfColumns() {\n      if (items.length <= 3 || window.innerWidth < 450) {\n        return 1;\n      }\n      if (items.length <= 8 || window.innerWidth < 800) {\n        return 2;\n      }\n      return 3;\n    }\n    window.onresize = () => this.setState({pageWidth: window.innerWidth});\n\n    const numberOfColumns = calculateNumberOfColumns();\n    const numberOfRows = Math.ceil(items.length / numberOfColumns);\n    const itemHeight = 100 / numberOfRows;\n    let itemWidth = 100 / numberOfColumns;\n    const gridStyle = {gridTemplateColumns: 'auto '.repeat(numberOfColumns)};\n    const emptySlots = (numberOfColumns * numberOfRows) - items.length;\n\n    return (\n      <div className=\"UberPage\" style={gridStyle}>\n        {\n          items.map((item, index) => {\n            const gridColumnStart = (index % numberOfColumns) + 1;\n            const gridRow = Math.floor((index / numberOfColumns) + 1);\n            const isLastItem = index + 1 === items.length;\n            const gridColumnEnd = isLastItem ? gridColumnStart + (emptySlots + 1) : gridColumnStart + 1;\n            itemWidth = isLastItem ? itemWidth * (emptySlots + 1) : itemWidth;\n            return (\n              <UberTile\n                key={index}\n                item={item}\n                settings={settings}\n                height={itemHeight}\n                width={itemWidth}\n                gridColumnStart={gridColumnStart}\n                gridColumnEnd={gridColumnEnd}\n                gridRow={gridRow}\n              />\n            );\n          })\n        }\n      </div>\n    );\n  }\n}\n\nexport default UberPage;\n","export default {\n  items: [\n    {\n      link: 'https://github.com/StegSchreck',\n      text_color: '#FFFFFF',\n      description: 'My profile page on GitHub',\n      background_logo: 'GitHub_white.svg',\n      background_color: '#000000',\n    },\n    {\n      link: 'https://github.com/StegSchreck/AngularCV',\n      description: 'Angular based online-CV',\n      background_logo: 'AngularCV_white_transparent.svg',\n    },\n    {\n      link: 'https://github.com/StegSchreck/RatS',\n      text_color: '#FFFFFF',\n      description: 'Python script for syncing movie ratings',\n      background_logo: 'RatS_inverted.png',\n      background_color: '#6D08A6',\n    },\n    {\n      link: 'https://github.com/StegSchreck/uberpage',\n      text_color: '#FFFFFF',\n      description: 'React based overview page for several links',\n      background_logo: 'UberPage_white.svg',\n      background_color: '#4A86E8',\n    },\n    {\n      link: 'https://github.com/StegSchreck/AWSreCalendar',\n      description: 'Python script for planning my stay at AWS re:Invent 2018',\n      background_logo: 'AWSreCalendar.png',\n      background_logo_size: 'contain',\n      background_color: '#FF9900',\n    },\n    {\n      link: 'https://github.com/StegSchreck/RecodingAviation',\n      description: 'Angular app for hackathon reCoding Aviation 2017',\n      background_logo: 'ReCodingAviation.png',\n      background_logo_size: 'contain',\n      background_color: '#E30613',\n    },\n    {\n      link: 'https://github.com/WiSchLabs/Kicktipper',\n      description: 'Calculating tips for football predictions games on Kicktipp',\n      background_logo: 'Kicktipper.png',\n      background_color: '#999999',\n    },\n    {\n      link: 'https://github.com/WiSchLabs/ofm_helper',\n      text_color: '#FFFFFF',\n      description: 'Django based helper tool for onlinefussballmanager.de',\n      background_logo: 'OFM_Helper_sw.png',\n      background_color: '#239123',\n    },\n  ],\n  settings: {\n    default_link_target: '_blank',\n    default_item: false,\n  },\n};\n","import React from 'react';\nimport './App.css';\nimport UberPage from \"../UberPage/UberPage\";\nimport data from \"../../data\";\n\nfunction App() {\n  const defaultItem = {\n    link: 'https://github.com/StegSchreck/uberpage',\n    title: 'About this page',\n    description: 'This page was created using the UberPage project.',\n    background_logo: 'UberPage.svg',\n    background_logo_size: '75%',\n  };\n  if (data.settings.default_item === undefined || data.settings.default_item) {\n    data.items.push(defaultItem);\n  }\n  return (\n    <div className=\"App\">\n      <UberPage items={data.items} settings={data.settings}/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost'\n  // [::1] is the IPv6 localhost address.\n  || window.location.hostname === '[::1]'\n  // 127.0.0.1/8 is considered localhost for IPv4.\n  || window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n);\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all '\n                + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404\n        || (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service '\n            + 'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App.jsx';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}